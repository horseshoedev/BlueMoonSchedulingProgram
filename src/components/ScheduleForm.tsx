import React, { useState } from 'react';
import { X, Calendar, Clock, Users, MapPin, Repeat } from 'lucide-react';
import { useAuth } from '../hooks/useAuth';
import { useAppContext } from '../hooks/useAppContext';
import { themeClasses } from '../utils/theme';
import { ScheduleEvent, ScheduleMeetingData } from '../types';

interface ScheduleFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (event: ScheduleEvent) => void;
  theme: 'light' | 'dark';
  groupId?: string;
  groupName?: string;
}

const ScheduleForm: React.FC<ScheduleFormProps> = ({
  isOpen,
  onClose,
  onSuccess,
  theme,
  groupId,
  groupName
}) => {
  const { token } = useAuth();
  const { groups, user } = useAppContext();
  const currentTheme = themeClasses[theme];

  const [formData, setFormData] = useState<ScheduleMeetingData>({
    title: '',
    description: '',
    date: '',
    startTime: '',
    endTime: '',
    groupId: groupId || '',
    attendees: [],
    location: '',
    isRecurring: false,
    recurringPattern: ''
  });

  const [selectedType, setSelectedType] = useState<'work' | 'personal' | 'social'>('work');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string>('');

  const eventTypes = [
    { value: 'work', label: 'Work', color: 'blue' },
    { value: 'personal', label: 'Personal', color: 'purple' },
    { value: 'social', label: 'Social', color: 'green' }
  ];

  const recurringOptions = [
    { value: '', label: 'No repeat' },
    { value: 'daily', label: 'Daily' },
    { value: 'weekly', label: 'Weekly' },
    { value: 'monthly', label: 'Monthly' }
  ];

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({
        ...prev,
        [name]: checked
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    // Client-side validation
    if (!formData.title.trim()) {
      setError('Event title is required');
      return;
    }

    if (!formData.date) {
      setError('Date is required');
      return;
    }

    if (!formData.startTime || !formData.endTime) {
      setError('Start and end times are required');
      return;
    }

    if (formData.startTime >= formData.endTime) {
      setError('End time must be after start time');
      return;
    }

    setIsSubmitting(true);

    try {
      // Create the schedule event object
      const newEvent: ScheduleEvent = {
        id: Date.now().toString(), // In real app, this would be generated by backend
        title: formData.title.trim(),
        description: formData.description?.trim(),
        startTime: formData.startTime,
        endTime: formData.endTime,
        date: formData.date,
        type: selectedType,
        groupId: formData.groupId || undefined,
        groupName: formData.groupId ? groups.find(g => g.id.toString() === formData.groupId)?.name : undefined,
        attendees: formData.attendees,
        location: formData.location?.trim() || undefined,
        isRecurring: formData.isRecurring,
        recurringPattern: formData.isRecurring ? formData.recurringPattern : undefined,
        status: 'scheduled',
        createdBy: user.id,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      // In a real app, this would be an API call
      // const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:3001/api'}/schedule`, {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //     'Authorization': `Bearer ${token}`
      //   },
      //   body: JSON.stringify(newEvent)
      // });

      console.log('Schedule event created:', newEvent);

      // Reset form
      setFormData({
        title: '',
        description: '',
        date: '',
        startTime: '',
        endTime: '',
        groupId: groupId || '',
        attendees: [],
        location: '',
        isRecurring: false,
        recurringPattern: ''
      });
      setSelectedType('work');

      onSuccess(newEvent);
      onClose();
    } catch (err) {
      console.error('Schedule creation error:', err);
      setError(err instanceof Error ? err.message : 'Failed to create event');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setFormData({
      title: '',
      description: '',
      date: '',
      startTime: '',
      endTime: '',
      groupId: groupId || '',
      attendees: [],
      location: '',
      isRecurring: false,
      recurringPattern: ''
    });
    setSelectedType('work');
    setError('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={`${currentTheme.cardBg} border ${currentTheme.border} rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto`}>
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center">
              <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <Calendar className="h-4 w-4 text-blue-600" />
              </div>
              <h2 className={`text-xl font-bold ${currentTheme.text}`}>
                {groupName ? `Schedule Event for ${groupName}` : 'Create New Event'}
              </h2>
            </div>
            <button
              onClick={handleClose}
              className={`p-1 rounded-full ${currentTheme.hover} transition-colors`}
            >
              <X className={`h-5 w-5 ${currentTheme.textSecondary}`} />
            </button>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Event Title */}
            <div>
              <label htmlFor="title" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                Event Title *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                required
                value={formData.title}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                placeholder="Enter event title"
              />
            </div>

            {/* Description */}
            <div>
              <label htmlFor="description" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows={3}
                value={formData.description}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                placeholder="Event description..."
              />
            </div>

            {/* Event Type */}
            <div>
              <label className={`block text-sm font-medium ${currentTheme.text} mb-3`}>
                Event Type *
              </label>
              <div className="flex space-x-4">
                {eventTypes.map((type) => (
                  <label key={type.value} className="flex items-center cursor-pointer">
                    <input
                      type="radio"
                      name="type"
                      value={type.value}
                      checked={selectedType === type.value}
                      onChange={(e) => setSelectedType(e.target.value as 'work' | 'personal' | 'social')}
                      className="mr-2"
                    />
                    <span className={`text-sm ${currentTheme.text}`}>
                      {type.label}
                    </span>
                  </label>
                ))}
              </div>
            </div>

            {/* Date and Time */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label htmlFor="date" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                  Date *
                </label>
                <input
                  type="date"
                  id="date"
                  name="date"
                  required
                  value={formData.date}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                />
              </div>
              <div>
                <label htmlFor="startTime" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                  Start Time *
                </label>
                <input
                  type="time"
                  id="startTime"
                  name="startTime"
                  required
                  value={formData.startTime}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                />
              </div>
              <div>
                <label htmlFor="endTime" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                  End Time *
                </label>
                <input
                  type="time"
                  id="endTime"
                  name="endTime"
                  required
                  value={formData.endTime}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                />
              </div>
            </div>

            {/* Group Selection */}
            {!groupId && (
              <div>
                <label htmlFor="groupId" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                  Group (Optional)
                </label>
                <select
                  id="groupId"
                  name="groupId"
                  value={formData.groupId}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                >
                  <option value="">Select a group (optional)</option>
                  {groups.filter(g => g.isJoined).map(group => (
                    <option key={group.id} value={group.id}>
                      {group.name}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {/* Location */}
            <div>
              <label htmlFor="location" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                Location (Optional)
              </label>
              <input
                type="text"
                id="location"
                name="location"
                value={formData.location}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                placeholder="Meeting location"
              />
            </div>

            {/* Recurring */}
            <div className="space-y-3">
              <label className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  name="isRecurring"
                  checked={formData.isRecurring}
                  onChange={handleChange}
                  className="mr-2"
                />
                <span className={`text-sm font-medium ${currentTheme.text}`}>
                  Recurring Event
                </span>
              </label>

              {formData.isRecurring && (
                <div>
                  <label htmlFor="recurringPattern" className={`block text-sm font-medium ${currentTheme.text} mb-2`}>
                    Repeat Pattern
                  </label>
                  <select
                    id="recurringPattern"
                    name="recurringPattern"
                    value={formData.recurringPattern}
                    onChange={handleChange}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${currentTheme.input}`}
                  >
                    {recurringOptions.map(option => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            {/* Error Message */}
            {error && (
              <div className="rounded-md bg-red-50 p-4">
                <div className="text-sm text-red-700">{error}</div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex space-x-3 pt-4">
              <button
                type="button"
                onClick={handleClose}
                className={`flex-1 px-4 py-2 border ${currentTheme.border} rounded-md ${currentTheme.text} ${currentTheme.hover} transition-colors`}
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting || !formData.title.trim()}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isSubmitting ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Creating...
                  </div>
                ) : (
                  'Create Event'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ScheduleForm;